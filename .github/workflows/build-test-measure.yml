name: Build, test & measure
on: push
jobs:

  release-zip:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps['retrieve-branch-name'].outputs.branch_name }}
      git-sha-8: ${{ steps['retrieve-git-sha-8'].outputs.sha8 }}

    steps:
      - name: Check out source files
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Configure Composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps['composer-cache'].outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        # Scripts are not ignored as they are needed to apply patches for the
        # `sabberworm/php-css-parser` dependency.
        run: |
          composer install \
          --prefer-dist \
          --optimize-autoloader

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v1
        with:
          path: ${{ steps['npm-cache'].outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        # Prevent malicious scripts from being run with `--ignore-scripts`
        run: |
          npm install \
          --ignore-scripts

      - name: Run build script
        run: |
          npm run build

      - name: Retrieve branch name
        id: retrieve-branch-name
        run: |
          echo "::set-output name=branch_name::$(echo ${GITHUB_REF#refs/heads/} \
          | sed 's/\//-/g')"

      - name: Retrieve git SHA-8 string
        id: retrieve-git-sha-8
        run: |
          echo "::set-output name=sha8::$(echo ${GITHUB_SHA} \
          | cut -c1-8)"

      - name: Upload release ZIP
        uses: actions/upload-artifact@v2
        env:
          SHA8: ${GITHUB_SHA::8}
        with:
          name: amp-${{ steps['retrieve-branch-name'].outputs.branch_name }}-${{ steps['retrieve-git-sha-8'].outputs.sha8 }}.zip
          path: amp.zip

#-----------------------------------------------------------------------------------------------------------------------

  lighthouse:
    runs-on: ubuntu-latest
    needs: release-zip

    steps:
      # Although we have a readily built ZIP of the plugin, we need the lighthouse configuration from source.
      - name: Check out source files
        uses: actions/checkout@v2

      - name: Download release ZIP
        uses: actions/download-artifact@v2
        with:
          # Downloaded file name will actually be amp.zip again.
          name: amp-${{ needs['release-zip'].outputs.branch-name }}-${{ needs['release-zip'].outputs.git-sha-8 }}.zip

      - name: Install MySQL client
        run: |
          sudo apt-get install -y mysql-client

      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp
          sudo chmod +x /usr/local/bin/wp

      - name: Install WordPress Core
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          mkdir -p www
          echo "path: www/" > wp-cli.local.yml
          wp core download \
          --force \
          --allow-root
          wp config create \
          --dbname=lighthouse_test \
          --dbuser=root \
          --dbpass=root \
          --dbhost="127.0.0.1:$PORT" \
          --force \
          --skip-check \
          --allow-root

      - name: Start MySQL server
        run: |
          sudo service mysql start

      - name: Initialize WordPress database
        run: |
          wp db create --allow-root
          wp core install --title="AMP Dev" \
          --admin_user=admin \
          --admin_password=password \
          --admin_email=test@test.com \
          --skip-email \
          --url=http://localhost:8080 \
          --allow-root

      - name: Install and activate the AMP plugin
        run: |
          wp plugin install amp.zip \
          --activate \
          --force \
          --allow-root

      - name: Install and activate the PWA plugin
        run: |
          wp plugin install pwa \
          --activate \
          --force \
          --allow-root

      - name: Install and activate the Yoast WordPress SEO plugin
        run: |
          wp plugin install wordress-seo \
          --activate \
          --force \
          --allow-root

      - name: Switch site into Transitional mode
        run: |
          wp eval \
          'AMP_Options_Manager::update_option( AmpProject\AmpWP\Option::THEME_SUPPORT, AMP_Theme_Support::TRANSITIONAL_MODE_SLUG );' \
          --allow-root

      - name: Install Lighthouse CI
        run: |
          sudo npm install -g @lhci/cli

      - name: Run Lighthouse CI health check
        run: |
          lhci healthcheck

      - name: Run Lighthouse CI audit
        run: |
          lhci collect

      - name: Assert Lighthouse CI measurements against requirements
        run: |
          echo -n 'Skipping assertions for now'
          # lhci assert

      - name: Upload Lighthouse CI measurements to Lighthouse CI server
        run: |
          lhci upload \
          --target=lhci \
          --serverBaseUrl=${{ secrets.LHCI_SERVER_BASE_URL }} \
          --token=${{ secrets.LHCI_BUILD_TOKEN }}
