name: Build, test & measure

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    # Run workflow whenever a PR is opened, updated (synchronized), or marked ready for review.
    types: [opened, synchronize, ready_for_review]

jobs:

  release-zip:
    name: Build plugin ZIPs and upload them as GHA artifact
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.retrieve-branch-name.outputs.branch_name }}
      git-sha-8: ${{ steps.retrieve-git-sha-8.outputs.sha8 }}

    steps:
      - name: Check out source files
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Configure Composer cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        # Scripts are not ignored as they are needed to apply patches for the
        # `sabberworm/php-css-parser` dependency.
        run: composer install --prefer-dist --optimize-autoloader

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node dependencies
        # Prevent malicious scripts from being run with `--ignore-scripts`
        run: npm install --ignore-scripts

      - name: Create destination directories
        run: mkdir -p builds/{dev,prod}

      - name: Build develop version
        run: |
          npm run build:dev
          mv amp.zip builds/dev/amp.zip

      - name: Build production version
        run: |
          npm run build:prod
          mv amp.zip builds/prod/amp.zip

      - name: Retrieve branch name
        id: retrieve-branch-name
        run: echo "::set-output name=branch_name::$(REF=${GITHUB_HEAD_REF:-$GITHUB_REF} && echo ${REF#refs/heads/} | sed 's/\//-/g')"

      - name: Retrieve git SHA-8 string
        id: retrieve-git-sha-8
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: amp-${{ steps.retrieve-branch-name.outputs.branch_name }}-${{ steps.retrieve-git-sha-8.outputs.sha8 }}
          path: builds

#-----------------------------------------------------------------------------------------------------------------------

  upload-to-gcs:
    name: Upload plugin ZIPs to Google Cloud Storage
    runs-on: ubuntu-latest
    needs: release-zip
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: amp-${{ needs.release-zip.outputs.branch-name }}-${{ needs.release-zip.outputs.git-sha-8 }}
          path: builds

      - name: Setup Google Cloud SDK
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GCS_APPLICATION_CREDENTIALS }}

      - name: Upload artifacts to bucket
        run: gsutil cp -r builds/* gs://ampwp_github_artifacts/${{ github.ref }}

#-----------------------------------------------------------------------------------------------------------------------

  comment-on-pr:
    name: Comment on PR with links to plugin ZIPs
    # Only run this job if it's a PR. One way to check for that is if `github.head_ref` is not empty.
    if: ${{ github.head_ref && github.head_ref != null }}
    runs-on: ubuntu-latest
    needs: upload-to-gcs

    outputs:
      pr_number: ${{ steps.get-pr-number.outputs.num }}
      comment_body: ${{ steps.get-comment-body.outputs.body }}

    steps:
      - name: Get PR number
        id: get-pr-number
        run: echo "::set-output name=num::$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')"

      - name: Check if a comment was already made
        id: find-comment
        uses: peter-evans/find-comment@v1
        with:
          issue-number: ${{ steps.get-pr-number.outputs.num }}
          comment-author: github-actions[bot]
          body-includes: Download [development build]

      - name: Get comment body
        id: get-comment-body
        # Setting a multi-line output requires escaping line-feeds. See <https://github.community/t/set-output-truncates-multiline-strings/16852/3>.
        run: |
          body="Plugin builds for ${{ github.sha }} are ready :bellhop_bell:!
          - Download [development build](https://storage.googleapis.com/ampwp_github_artifacts/${{ github.ref }}/dev/amp.zip)
          - Download [production build](https://storage.googleapis.com/ampwp_github_artifacts/${{ github.ref }}/prod/amp.zip)"
          body="${body//$'\n'/'%0A'}"
          echo "::set-output name=body::$body"

      - name: Create comment on PR with links to plugin builds
        if: ${{ steps.find-comment.outputs.comment-id == '' }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.get-pr-number.outputs.num }}
          body: ${{ steps.get-comment-body.outputs.body }}

      - name: Update comment on PR with links to plugin builds
        if: ${{ steps.find-comment.outputs.comment-id != '' }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}

#-----------------------------------------------------------------------------------------------------------------------

  lighthouse:
    name: Audit and track performance via Lighthouse CI
    runs-on: ubuntu-latest
    needs: release-zip

    steps:
      # Although we have a readily built ZIP of the plugin, we need the lighthouse configuration from source.
      - name: Check out source files
        uses: actions/checkout@v2

      - name: Download release ZIPs
        uses: actions/download-artifact@v2
        with:
          # Downloaded file name will actually be amp.zip again.
          name: amp-${{ needs.release-zip.outputs.branch-name }}-${{ needs.release-zip.outputs.git-sha-8 }}
          path: build

      - name: Install MySQL client
        run: |
          sudo apt-get install -y mysql-client

      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp
          sudo chmod +x /usr/local/bin/wp

      - name: Install WordPress Core
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          mkdir -p www
          echo "path: www/" > wp-cli.local.yml
          wp core download \
          --force \
          --allow-root
          wp config create \
          --dbname=lighthouse_test \
          --dbuser=root \
          --dbpass=root \
          --dbhost="127.0.0.1:$PORT" \
          --force \
          --skip-check \
          --allow-root

      - name: Start MySQL server
        run: |
          sudo service mysql start

      - name: Initialize WordPress database
        run: |
          wp db create --allow-root
          wp core install --title="AMP Dev" \
          --admin_user=admin \
          --admin_password=password \
          --admin_email=test@test.com \
          --skip-email \
          --url=http://localhost:8080 \
          --allow-root

      - name: Install and activate the AMP plugin
        run: |
          wp plugin install builds/prod/amp.zip \
          --activate \
          --force \
          --allow-root

      - name: Install and activate the PWA plugin
        run: |
          wp plugin install pwa \
          --activate \
          --force \
          --allow-root

      - name: Install the URL Toggles plugin as a must-use plugin
        run: |
          mkdir -p www/wp-content/mu-plugins
          cp tests/e2e/plugins/url-toggles.php www/wp-content/mu-plugins

      - name: Install the Meta Description plugin as a must-use plugin
        run: |
          cp tests/e2e/plugins/add-meta-description.php www/wp-content/mu-plugins

      - name: Create basic robots.txt file
        run: |
          echo "User-agent: *\nDisallow: /wp-admin/\nAllow: /wp-admin/admin-ajax.php\n" > www/robots.txt

      - name: Switch site into Transitional mode
        run: |
          wp eval \
          'AMP_Options_Manager::update_option( AmpProject\AmpWP\Option::THEME_SUPPORT, AMP_Theme_Support::TRANSITIONAL_MODE_SLUG );' \
          --allow-root

      - name: Install Lighthouse CI
        run: |
          sudo npm install -g @lhci/cli

      - name: Run Lighthouse CI health check
        run: |
          lhci healthcheck

      - name: Run Lighthouse CI audit
        run: |
          lhci collect

      - name: Assert Lighthouse CI measurements against requirements
        run: |
          echo -n 'Skipping assertions for now'
          # lhci assert

      - name: Upload Lighthouse CI measurements to Lighthouse CI server
        run: |
          lhci upload \
          --target=lhci \
          --serverBaseUrl=${{ secrets.LHCI_SERVER_BASE_URL }} \
          --token=${{ secrets.LHCI_BUILD_TOKEN }}
